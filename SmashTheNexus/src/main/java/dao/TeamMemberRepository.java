package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.model.TeamMember;

public class TeamMemberRepository {

	private Connection connection;

	private String createTableSql = "CREATE TABLE team_member(" + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name varchar(50)," + "surname varchar(50)," + "nick varchar(50)," + "Team_Id int," 
			+ "age int,"
			+ "country varchar(30),"
			+ "favourite_champion varchar(30),"+ ")";

	private Statement createTable;

	private String insertSql = "INSERT INTO team_member(name, surname, nick, team_id, age, country, favourite_champion) VALUES(?,?,?,?,?,?,?)";
	private String deleteSql = "DELETE FROM team_member WHERE id = ?";
	private String updateSql = "UPDATE team_member SET name=?,surname=?,nick=?,team_id=?,age=?,country=?,favourite_champion=? WHERE id=?";
	private String selectByIdSql = "SELECT * FROM team_member WHERE id=?";
	private String selectAllSql = "SELECT * FROM team_member";

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement selectById;
	private PreparedStatement selectAll;

	public TeamMemberRepository(Connection connection) {
		this.connection = connection;

		try {
			createTable = connection.createStatement();

			boolean tableExists = false;
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			while (rs.next()) {
				if (rs.getString("TABLE_NAME").equalsIgnoreCase("team_member")) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) {
				createTable.executeUpdate(createTableSql);
			}
			
			insert = connection.prepareStatement(insertSql);
			delete = connection.prepareStatement(deleteSql);
			update = connection.prepareStatement(updateSql);
			selectById = connection.prepareStatement(selectByIdSql);
			selectAll = connection.prepareStatement(selectAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public TeamMember get(int teamId) {
		try {
			selectById.setInt(1, teamId);
			ResultSet rs = selectById.executeQuery();
			while (rs.next()) {
				TeamMember result = new TeamMember();
				result.setID(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setSurname(rs.getString("surname"));
				result.setNick(rs.getString("nick"));
				result.setTeamID(rs.getInt("team_id"));
				result.setAge(rs.getInt("age"));
				result.setCountry(rs.getString("country"));
				result.setFavouriteChampion(rs.getString("favourite_champion"));
				return result;
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public List<TeamMember> getAll() {
		try {
			List<TeamMember> result = new ArrayList<TeamMember>();
			ResultSet rs = selectAll.executeQuery();
			while (rs.next()) {
				TeamMember t = new TeamMember();
				t.setID(rs.getInt("id"));
				t.setName(rs.getString("name"));
				t.setSurname(rs.getString("surname"));
				t.setNick(rs.getString("nick"));
				t.setTeamID(rs.getInt("team_id"));
				t.setAge(rs.getInt("age"));
				t.setCountry(rs.getString("country"));
				t.setFavouriteChampion(rs.getString("favourite_champion"));
				result.add(t);
			}
			return result;
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public void delete(TeamMember t) {
		try {
			delete.setInt(1, t.getID());
			delete.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void add(TeamMember t) {
		try {
			insert.setString(1, t.getName());
			insert.setString(2, t.getSurname());
			insert.setString(3, t.getNick());
			insert.setInt(4, t.getTeamID());
			insert.setInt(5, t.getAge());
			insert.setString(6, t.getCountry());
			insert.setString(7, t.getFavouriteChampion());
			insert.executeUpdate();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}

	}

	public void update(TeamMember t) {
		try {
			update.setString(1, t.getName());
			update.setString(2, t.getSurname());
			update.setString(3, t.getNick());
			update.setInt(4, t.getTeamID());
			update.setInt(5, t.getAge());
			update.setString(6, t.getCountry());
			update.setString(7, t.getFavouriteChampion());
			update.setInt(8, t.getID());
			update.executeUpdate();

		} catch (SQLException ex) {
			ex.printStackTrace();
		}

	}

}
